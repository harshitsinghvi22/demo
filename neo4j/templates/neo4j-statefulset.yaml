apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.serviceName }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      annotations:
        "checksum/{{ .Release.Name }}-config": {{ include (print $.Template.BasePath "/neo4j-config.yaml") . | sha256sum }}
    spec:
      securityContext: {{toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: "{{ .Chart.Name }}"
          {{- if .Values.image.customImage }}
          image: "{{ .Values.image.customImage }}"
          {{- else }}
          image: "{{ .Chart.Name }}:{{ .Chart.AppVersion }}-enterprise"
          {{- end }}
          imagePullPolicy: "{{ .Values.image.imagePullPolicy }}"
          envFrom:
            - configMapRef:
                name: "{{ .Release.Name }}-env"
          ports:
            - containerPort: 7474
              name: http
            - containerPort: 7687
              name: bolt
            - containerPort: 7473
              name: https
            - containerPort: 6362
              name: backup
          volumeMounts:
            - name: "{{ .Release.Name }}-data"
              mountPath: "/data"
            - name: neo4j-conf
              mountPath: "/config/neo4j.conf"
            - name: bolt-cert
              mountPath: /var/lib/neo4j/certificates/bolt/public.crt
              subPath: public.crt
              readOnly: true
            - name: bolt-key
              mountPath: /var/lib/neo4j/certificates/bolt/private.key
              subPath: private.key
              readOnly: true
            - name: https-cert
              mountPath: /var/lib/neo4j/certificates/https/public.crt
              subPath: public.crt
              readOnly: true
            - name: https-key
              mountPath: /var/lib/neo4j/certificates/https/private.key
              subPath: private.key
              readOnly: true
          readinessProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          livenessProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          startupProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
      volumes:
        {{- /* neo4j.conf settings. Using a projected volume allows keys defined later in the list of configMaps to override keys defined earlier in the list of configmaps. */}}
        - name: neo4j-conf
          projected:
            sources:
              - configMap:
                  name: "{{ .Release.Name }}-default-config"
              - configMap:
                  name: "{{ .Release.Name }}-user-config"
              - configMap:
                  name: "{{ .Release.Name }}-k8s-config"
        - name: bolt-cert
          secret:
           secretName: bolt-cert
        - name: bolt-key
          secret:
            secretName: bolt-key
        - name: https-cert
          secret:
            secretName: https-cert
        - name: https-key
          secret:
            secretName: https-key
  volumeClaimTemplates:
    - metadata:
        name: "{{ .Release.Name }}-data"
      spec:
        storageClassName: "{{ .Values.volumeClaimTemplates.storageClassName }}"
        selector: # adding a selector here ensures that we use only Persistent Volumes that have been created and labelled specifically for neo4j and prevents "helpful" systems creating new Persistent Volumes dynamically
          matchLabels:
            app: {{ .Release.Name }}
        accessModes: [ "{{ .Values.volumeClaimTemplates.accessModes }}" ]
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.storage }}