apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ .Release.Name }}
  name: {{ .Values.name  }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.serviceName }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      securityContext: {{toYaml .Values.securityContext | nindent 8 }}
      containers:
        - image: {{ .Chart.Name }}:{{ .Chart.AppVersion }}-enterprise
          imagePullPolicy: "{{ .Values.image.imagePullPolicy }}"
          name: {{ .Chart.Name }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-config
          ports:
            - containerPort: 7474
              name: http
            - containerPort: 7687
              name: bolt
            - containerPort: 7473
              name: https
            - containerPort: 6362
              name: backup
          volumeMounts:
            - name: {{ .Values.volumeMounts.name }}
              mountPath: "/data"
          readinessProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          livenessProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          startupProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
  volumeClaimTemplates:
  - metadata:
      name: neo4j-data
    spec:
      storageClassName: "{{ .Values.volumeClaimTemplates.storageClassName }}"
      selector: # adding a selector here ensures that we use only Persistent Volumes that have been created and labelled specifically for neo4j and prevents "helpful" systems creating new Persistent Volumes dynamically
        matchLabels:
          app: {{ .Release.Name }}
      accessModes: [ "{{ .Values.volumeClaimTemplates.accessModes }}" ]
      resources:
        requests:
          storage: {{ .Values.volumeClaimTemplates.storage }}