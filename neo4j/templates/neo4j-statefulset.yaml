{{- $authDisabled := index .Values.config "dbms.security.auth_enabled" | default "" | regexMatch "(?i)no|false" -}}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: "{{ template "neo4j.appName" . }}"
    helm.neo4j.com/instance: "{{ .Release.Name }}"
  name: "{{ .Release.Name }}"
  namespace: "{{ .Release.Namespace }}"
spec:
  serviceName: "{{ .Release.Name }}"
  replicas: 1
  selector:
    matchLabels:
      app: "{{ template "neo4j.appName" . }}"
  template:
    metadata:
      labels:
        app: "{{ template "neo4j.appName" . }}"
        helm.neo4j.com/pod_category: "neo4j-instance" # used for anti affinity rules
        helm.neo4j.com/instance: "{{ .Release.Name }}"
      annotations:
        "checksum/{{ .Release.Name }}-config": {{ include (print $.Template.BasePath "/neo4j-config.yaml") . | sha256sum }}
    spec:
      {{- if .Values.podAntiAffinity }}
      affinity:
        {{- if kindIs "bool" .Values.podAntiAffinity }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: "{{ template "neo4j.appName" . }}"
                  helm.neo4j.com/pod_category: "neo4j-instance"
              topologyKey: kubernetes.io/hostname
        {{- else }}
        podAntiAffinity: {{  toYaml .Values.podAntiAffinity | nindent 10 }}
        {{- end }}
      {{- end }}
      serviceAccountName: "{{ .Release.Name }}"
      securityContext: {{toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: "neo4j"
          image: "{{ template "neo4j.image" . }}"
          imagePullPolicy: "{{ .Values.image.imagePullPolicy }}"
          envFrom:
            - configMapRef:
                name: "{{ .Release.Name }}-env"
            {{- if not $authDisabled }}
            - secretRef:
                name: "{{ .Release.Name }}-auth"
            {{- end }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SERVICE_ADMIN
              value: "{{ .Release.Name }}-admin.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
            - name: SERVICE_NEO4J
              value: "{{ .Release.Name }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
          ports:
            - containerPort: 7474
              name: http
            - containerPort: 7687
              name: bolt
            - containerPort: 7473
              name: https
            - containerPort: 6362
              name: backup
          volumeMounts:
            - name: "data"
              mountPath: "/data"
            - name: neo4j-conf
              mountPath: "/config/neo4j.conf"
            {{ if .Values.ssl.bolt.privateKey.secretName }}
            - name: bolt-cert
              mountPath: /var/lib/neo4j/certificates/bolt
              readOnly: true
            {{ end }}
            {{ if .Values.ssl.bolt.privateKey.secretName }}
            - name: https-cert
              mountPath: /var/lib/neo4j/certificates/https
              readOnly: true
            {{ end }}
          readinessProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          livenessProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          startupProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
      volumes:
        {{- /* neo4j.conf settings. Using a projected volume allows keys defined later in the list of configMaps to override keys defined earlier in the list of configmaps. */}}
        - name: neo4j-conf
          projected:
            defaultMode: 0440
            sources:
              - configMap:
                  name: "{{ .Release.Name }}-default-config"
              - configMap:
                  name: "{{ .Release.Name }}-user-config"
              - configMap:
                  name: "{{ .Release.Name }}-k8s-config"
        {{ if .Values.ssl.bolt.privateKey.secretName }}
        - name: bolt-cert
          projected:
            sources:
              - secret:
                  name: {{ .Values.ssl.bolt.publicCertificate.secretName }}
              - secret:
                  name: {{ .Values.ssl.bolt.privateKey.secretName }}
        {{ end }}
        {{ if .Values.ssl.https.privateKey.secretName }}
        - name: https-cert
          projected:
            sources:
              - secret:
                  name: {{ .Values.ssl.https.publicCertificate.secretName }}
              - secret:
                  name: {{ .Values.ssl.https.privateKey.secretName }}
         {{ end }}
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        {{- if .Values.volumeClaimTemplates.useDefaultStorageClass }}
          {{- if .Values.volumeClaimTemplates.storageClassName }}
            {{ fail "If useDefaultStorageClass is set true then storageClassName must be null or empty." }}
          {{- end }}
        {{- else }}
        storageClassName: "{{ .Values.volumeClaimTemplates.storageClassName }}"
        {{- end }}
        # Some complicated chart logic here to avoid incompatible type errors if storageClassName is NULL
        {{ $useSelector := .Values.volumeClaimTemplates.useVolumeSelector }}
        {{- if not $useSelector | and .Values.volumeClaimTemplates.storageClassName }}
          {{ $useSelector = eq "manual" .Values.volumeClaimTemplates.storageClassName }}
        {{- end }}
        {{- if $useSelector }}
        selector:
          matchLabels:
            app: "{{ template "neo4j.appName" . }}"
        {{- end }}
        accessModes: {{ toYaml .Values.volumeClaimTemplates.accessModes | nindent 10 }}
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.request}}