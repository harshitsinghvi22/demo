apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: "{{ .Release.Name }}"
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      annotations:
        "checksum/{{ .Release.Name }}-config": {{ include (print $.Template.BasePath "/neo4j-config.yaml") . | sha256sum }}
    spec:
      securityContext: {{toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: "{{ .Chart.Name }}"
          {{- if .Values.image.customImage }}
          image: "{{ .Values.image.customImage }}"
          {{- else }}
          image: "{{ .Chart.Name }}:{{ .Chart.AppVersion }}-enterprise"
          {{- end }}
          imagePullPolicy: "{{ .Values.image.imagePullPolicy }}"
          envFrom:
            - configMapRef:
                name: "{{ .Release.Name }}-env"
            - secretRef:
                name: "{{ .Release.Name }}-auth"
          ports:
            - containerPort: 7474
              name: http
            - containerPort: 7687
              name: bolt
            - containerPort: 7473
              name: https
            - containerPort: 6362
              name: backup
          volumeMounts:
            - name: "data"
              mountPath: "/data"
            - name: neo4j-conf
              mountPath: "/config/neo4j.conf"
            {{ if .Values.ssl.bolt.privateKey.secretName }}
            - name: bolt-cert
              mountPath: /var/lib/neo4j/certificates/bolt
              readOnly: true
            {{ end }}
            {{ if .Values.ssl.bolt.privateKey.secretName }}
            - name: https-cert
              mountPath: /var/lib/neo4j/certificates/https
              readOnly: true
            {{ end }}
          readinessProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          livenessProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          startupProbe:
            tcpSocket:
              port: 7687
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
      volumes:
        {{- /* neo4j.conf settings. Using a projected volume allows keys defined later in the list of configMaps to override keys defined earlier in the list of configmaps. */}}
        - name: neo4j-conf
          projected:
            sources:
              - configMap:
                  name: "{{ .Release.Name }}-default-config"
              - configMap:
                  name: "{{ .Release.Name }}-user-config"
              - configMap:
                  name: "{{ .Release.Name }}-k8s-config"
        {{ if .Values.ssl.bolt.privateKey.secretName }}
        - name: bolt-cert
          projected:
            sources:
              - secret:
                  name: {{ .Values.ssl.bolt.publicCertificate.secretName }}
              - secret:
                  name: {{ .Values.ssl.bolt.privateKey.secretName }}
        {{ end }}
        {{ if .Values.ssl.https.privateKey.secretName }}
        - name: https-cert
          projected:
            sources:
              - secret:
                  name: {{ .Values.ssl.https.publicCertificate.secretName }}
              - secret:
                  name: {{ .Values.ssl.https.privateKey.secretName }}
         {{ end }}
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        storageClassName: "{{ .Values.volumeClaimTemplates.storageClassName }}"
        selector: # adding a selector here helps us to use only Persistent Volumes that have been created and labelled specifically for neo4j
          matchLabels:
            app: "{{ .Release.Name }}"
        accessModes: {{ toYaml .Values.volumeClaimTemplates.accessModes | nindent 10 }}
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.request}}